import requests
from datetime import datetime
from core.config import Config, statuses
from utils.logger import logger as log
# def build_message_for_ticket(ticket: dict, custom_fields: list = []):
#     track = ticket.get("trackid")
#     name = ticket.get("name")
#     subject = ticket.get("subject")
#     message = ticket.get("message")
#     owner = ticket.get("owner_name")
#     status = ticket.get("status")
#     if not owner:
#         owner = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
#     category = ticket.get("category_name")
#     buff = ""
#     if custom_fields:
#         buff = "\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:"
#         for cf in custom_fields:
#             if cf.get('value'):
#                 buff += f"\n - {cf.get('name')}: `{cf.get('value')}`"
    
#     reply_markup = {
#         "inline_keyboard": [
#                 [
#                     {"text":"–ü–æ–¥—Ä–æ–±–Ω–µ–µ üñ•", "url": f"{Config.hesk_web_url}/admin/admin_ticket.php?track={track}"}
#                 ]
#             ]
#     }

#     message = f"""–ë—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. 
# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ `{track}`:
# –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–ª(–∞): {name}
# –¢–µ–º–∞ –∑–∞—è–≤–∫–∏: *{subject}*
# –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—è–≤–∫–∏: *{category}* {buff}

# –¢–µ–ª–æ –∑–∞—è–≤–∫–∏:
# ```bash
# {message}
# ```
# –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: _{owner}_
# –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: _{status}_
# """
    # return message, reply_markup

def if_type_is_date(row: dict):
    value: str = row.get('value')
    value = int(value) if value.isdigit() else None
    if not value: return value
    date = datetime.fromtimestamp(value)
    return date.strftime("%d-%m-%Y")

def build_message_for_ticket(t: dict, custom_fields: list):
    # status = statuses[t.get('status')]
    trackid = t.get('trackid')
    # body = '' if not t.get('message') else t['message'].split('<br')[0] + "..."
    custom_fields_data = ""
    if custom_fields:
        for cf in custom_fields:
            log.debug(cf)
            if '<br />' in cf.get('value'):
                new_val = ''
                for val in cf['value'].split('<br />'):
                    new_val += f'\n    - {val} ‚úÖ'
                cf['value'] = new_val
            value = if_type_is_date(cf) if cf.get('type') == 'date' else cf.get('value')
            custom_fields_data += f'''\n- {cf.get("name") }: <code>{value if value else "-"}</code>'''
    message = f"""–ó–∞—è–≤–∫–∞ <code>{trackid}</code> -> {t.get('status')}\
        \nüë®‚Äçüíª {t.get('name')} \
        \nüì™ {t.get('email')} \
        \nüî¨ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {t.get('category_name')}\
        \n–¢–µ–º–∞: <em>{'' if not t.get('subject') else t['subject']}</em>\
        \n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:\
        \n{'- –ù–µ—Ç' if not custom_fields_data else custom_fields_data}"""
    reply_markup = {
        "inline_keyboard": [
                [
                    {"text": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å ‚öôÔ∏è", "callback_data": f"tickets_reload_{trackid}"}  
                ],
                [
                    {"text":"–ü–æ–¥—Ä–æ–±–Ω–µ–µ üñ•", "url": f"{Config.hesk_web_url}/admin/admin_ticket.php?track={trackid}"}
                ]
            ]
        }
    return message, reply_markup

def bot_send_message(message: str, reply_markup: dict, chat_id: int):
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "chat_id": chat_id,
        "parse_mode": "html",
        "text": message,
        "reply_markup": reply_markup,
        'disable_notification': False,
    }
    
    response = requests.post(f"{Config.bot_url}{Config.bot_token}/sendMessage", json=data, headers=headers)
    return response.json()

def bot_notify(message: str, reply_markup: dict, chat_ids: list):
    payload = []
    if not chat_ids:
        return payload
    for c in chat_ids:
        c_payload = bot_send_message(message, reply_markup, c)
        if not c_payload.get('ok'):
            bot_send_message("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", reply_markup, c)
        payload.append(c_payload)
    return payload